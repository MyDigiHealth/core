/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CertificationManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MEDICAL_VALIDATION_AUTHORITY_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "defaultDrugStoreLicenseValidity()": FunctionFragment;
    "defaultlicenseValidity()": FunctionFragment;
    "extendLicense(uint8,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantLicense(uint8,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isLicenseValid(uint8,address)": FunctionFragment;
    "licenseRevoked(uint8,address)": FunctionFragment;
    "licenseSuspendedTill(uint8,address)": FunctionFragment;
    "licenseValidTill(uint8,address)": FunctionFragment;
    "licensed(uint8,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeLicense(uint8,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "suspendLicense(uint8,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unrevokeLicense(uint8,address)": FunctionFragment;
    "unsuspendLicense(uint8,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MEDICAL_VALIDATION_AUTHORITY_ROLE"
      | "PAUSER_ROLE"
      | "defaultDrugStoreLicenseValidity"
      | "defaultlicenseValidity"
      | "extendLicense"
      | "getRoleAdmin"
      | "grantLicense"
      | "grantRole"
      | "hasRole"
      | "isLicenseValid"
      | "licenseRevoked"
      | "licenseSuspendedTill"
      | "licenseValidTill"
      | "licensed"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeLicense"
      | "revokeRole"
      | "supportsInterface"
      | "suspendLicense"
      | "unpause"
      | "unrevokeLicense"
      | "unsuspendLicense"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDICAL_VALIDATION_AUTHORITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultDrugStoreLicenseValidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultlicenseValidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendLicense",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantLicense",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLicenseValid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseRevoked",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseSuspendedTill",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseValidTill",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licensed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLicense",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendLicense",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unrevokeLicense",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unsuspendLicense",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDICAL_VALIDATION_AUTHORITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultDrugStoreLicenseValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultlicenseValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLicenseValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseSuspendedTill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseValidTill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "licensed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unrevokeLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsuspendLicense",
    data: BytesLike
  ): Result;

  events: {
    "LicenseExtended(uint8,address,address,uint256,uint256)": EventFragment;
    "LicenseGranted(uint8,address,address,uint256)": EventFragment;
    "LicenseRevoked(uint8,address,address)": EventFragment;
    "LicenseSuspended(uint8,address,address,uint256)": EventFragment;
    "LicenseUnrevoked(uint8,address,address)": EventFragment;
    "LicenseUnsuspended(uint8,address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LicenseExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseUnrevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseUnsuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface LicenseExtendedEventObject {
  professionalType: number;
  authorityAddress: string;
  professionalAddress: string;
  extension: BigNumber;
  validity: BigNumber;
}
export type LicenseExtendedEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber],
  LicenseExtendedEventObject
>;

export type LicenseExtendedEventFilter = TypedEventFilter<LicenseExtendedEvent>;

export interface LicenseGrantedEventObject {
  professionalType: number;
  authorityAddress: string;
  professionalAddress: string;
  validity: BigNumber;
}
export type LicenseGrantedEvent = TypedEvent<
  [number, string, string, BigNumber],
  LicenseGrantedEventObject
>;

export type LicenseGrantedEventFilter = TypedEventFilter<LicenseGrantedEvent>;

export interface LicenseRevokedEventObject {
  professionalType: number;
  authorityAddress: string;
  professionalAddress: string;
}
export type LicenseRevokedEvent = TypedEvent<
  [number, string, string],
  LicenseRevokedEventObject
>;

export type LicenseRevokedEventFilter = TypedEventFilter<LicenseRevokedEvent>;

export interface LicenseSuspendedEventObject {
  professionalType: number;
  authorityAddress: string;
  professionalAddress: string;
  suspendedTill: BigNumber;
}
export type LicenseSuspendedEvent = TypedEvent<
  [number, string, string, BigNumber],
  LicenseSuspendedEventObject
>;

export type LicenseSuspendedEventFilter =
  TypedEventFilter<LicenseSuspendedEvent>;

export interface LicenseUnrevokedEventObject {
  professionalType: number;
  authorityAddress: string;
  professionalAddress: string;
}
export type LicenseUnrevokedEvent = TypedEvent<
  [number, string, string],
  LicenseUnrevokedEventObject
>;

export type LicenseUnrevokedEventFilter =
  TypedEventFilter<LicenseUnrevokedEvent>;

export interface LicenseUnsuspendedEventObject {
  professionalType: number;
  authorityAddress: string;
  professionalAddress: string;
  suspendedTill: BigNumber;
}
export type LicenseUnsuspendedEvent = TypedEvent<
  [number, string, string, BigNumber],
  LicenseUnsuspendedEventObject
>;

export type LicenseUnsuspendedEventFilter =
  TypedEventFilter<LicenseUnsuspendedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CertificationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CertificationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MEDICAL_VALIDATION_AUTHORITY_ROLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    defaultDrugStoreLicenseValidity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultlicenseValidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    extendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      extension: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLicenseValid(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    licenseRevoked(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    licenseSuspendedTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    licenseValidTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    licensed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    suspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unrevokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsuspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MEDICAL_VALIDATION_AUTHORITY_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  defaultDrugStoreLicenseValidity(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultlicenseValidity(overrides?: CallOverrides): Promise<BigNumber>;

  extendLicense(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    extension: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantLicense(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLicenseValid(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  licenseRevoked(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  licenseSuspendedTill(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  licenseValidTill(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  licensed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeLicense(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  suspendLicense(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unrevokeLicense(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsuspendLicense(
    professionalType: PromiseOrValue<BigNumberish>,
    professionalAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MEDICAL_VALIDATION_AUTHORITY_ROLE(
      overrides?: CallOverrides
    ): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    defaultDrugStoreLicenseValidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultlicenseValidity(overrides?: CallOverrides): Promise<BigNumber>;

    extendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      extension: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLicenseValid(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    licenseRevoked(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    licenseSuspendedTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseValidTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licensed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    suspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unrevokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unsuspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LicenseExtended(uint8,address,address,uint256,uint256)"(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      extension?: null,
      validity?: null
    ): LicenseExtendedEventFilter;
    LicenseExtended(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      extension?: null,
      validity?: null
    ): LicenseExtendedEventFilter;

    "LicenseGranted(uint8,address,address,uint256)"(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      validity?: null
    ): LicenseGrantedEventFilter;
    LicenseGranted(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      validity?: null
    ): LicenseGrantedEventFilter;

    "LicenseRevoked(uint8,address,address)"(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null
    ): LicenseRevokedEventFilter;
    LicenseRevoked(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null
    ): LicenseRevokedEventFilter;

    "LicenseSuspended(uint8,address,address,uint256)"(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      suspendedTill?: null
    ): LicenseSuspendedEventFilter;
    LicenseSuspended(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      suspendedTill?: null
    ): LicenseSuspendedEventFilter;

    "LicenseUnrevoked(uint8,address,address)"(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null
    ): LicenseUnrevokedEventFilter;
    LicenseUnrevoked(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null
    ): LicenseUnrevokedEventFilter;

    "LicenseUnsuspended(uint8,address,address,uint256)"(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      suspendedTill?: null
    ): LicenseUnsuspendedEventFilter;
    LicenseUnsuspended(
      professionalType?: null,
      authorityAddress?: null,
      professionalAddress?: null,
      suspendedTill?: null
    ): LicenseUnsuspendedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MEDICAL_VALIDATION_AUTHORITY_ROLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    defaultDrugStoreLicenseValidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultlicenseValidity(overrides?: CallOverrides): Promise<BigNumber>;

    extendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      extension: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLicenseValid(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseRevoked(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseSuspendedTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseValidTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licensed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unrevokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsuspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MEDICAL_VALIDATION_AUTHORITY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultDrugStoreLicenseValidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultlicenseValidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      extension: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLicenseValid(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licenseRevoked(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licenseSuspendedTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licenseValidTill(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licensed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    suspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unrevokeLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsuspendLicense(
      professionalType: PromiseOrValue<BigNumberish>,
      professionalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
